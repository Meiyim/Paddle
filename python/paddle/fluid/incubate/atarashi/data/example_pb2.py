# Copyright (c) 2019 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: atarashi/protos/example.proto

import sys
_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()

DESCRIPTOR = _descriptor.FileDescriptor(
    name='atarashi/protos/example.proto',
    package='atarashi',
    serialized_pb=_b(
        '\n\x1d\x61tarashi/protos/example.proto\x12\x08\x61tarashi\"\x1a\n\tBytesList\x12\r\n\x05value\x18\x01 \x03(\x0c\"\x1e\n\tFloatList\x12\x11\n\x05value\x18\x01 \x03(\x02\x42\x02\x10\x01\"\x1e\n\tInt64List\x12\x11\n\x05value\x18\x01 \x03(\x03\x42\x02\x10\x01\"\x9f\x01\n\x07\x46\x65\x61ture\x12\x0b\n\x03tag\x18\x01 \x01(\t\x12)\n\nbytes_list\x18\x02 \x01(\x0b\x32\x13.atarashi.BytesListH\x00\x12)\n\nfloat_list\x18\x03 \x01(\x0b\x32\x13.atarashi.FloatListH\x00\x12)\n\nint64_list\x18\x04 \x01(\x0b\x32\x13.atarashi.Int64ListH\x00\x42\x06\n\x04kind\".\n\x07\x45xample\x12#\n\x08\x66\x65\x61tures\x18\x01 \x03(\x0b\x32\x11.atarashi.Feature'
    ))
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_BYTESLIST = _descriptor.Descriptor(
    name='BytesList',
    full_name='atarashi.BytesList',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='value',
            full_name='atarashi.BytesList.value',
            index=0,
            number=1,
            type=12,
            cpp_type=9,
            label=3,
            has_default_value=False,
            default_value=[],
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    extension_ranges=[],
    oneofs=[],
    serialized_start=43,
    serialized_end=69, )

_FLOATLIST = _descriptor.Descriptor(
    name='FloatList',
    full_name='atarashi.FloatList',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='value',
            full_name='atarashi.FloatList.value',
            index=0,
            number=1,
            type=2,
            cpp_type=6,
            label=3,
            has_default_value=False,
            default_value=[],
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(),
                                              _b('\020\001'))),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    extension_ranges=[],
    oneofs=[],
    serialized_start=71,
    serialized_end=101, )

_INT64LIST = _descriptor.Descriptor(
    name='Int64List',
    full_name='atarashi.Int64List',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='value',
            full_name='atarashi.Int64List.value',
            index=0,
            number=1,
            type=3,
            cpp_type=2,
            label=3,
            has_default_value=False,
            default_value=[],
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(),
                                              _b('\020\001'))),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    extension_ranges=[],
    oneofs=[],
    serialized_start=103,
    serialized_end=133, )

_FEATURE = _descriptor.Descriptor(
    name='Feature',
    full_name='atarashi.Feature',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='tag',
            full_name='atarashi.Feature.tag',
            index=0,
            number=1,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b("").decode('utf-8'),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='bytes_list',
            full_name='atarashi.Feature.bytes_list',
            index=1,
            number=2,
            type=11,
            cpp_type=10,
            label=1,
            has_default_value=False,
            default_value=None,
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='float_list',
            full_name='atarashi.Feature.float_list',
            index=2,
            number=3,
            type=11,
            cpp_type=10,
            label=1,
            has_default_value=False,
            default_value=None,
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None),
        _descriptor.FieldDescriptor(
            name='int64_list',
            full_name='atarashi.Feature.int64_list',
            index=3,
            number=4,
            type=11,
            cpp_type=10,
            label=1,
            has_default_value=False,
            default_value=None,
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    extension_ranges=[],
    oneofs=[
        _descriptor.OneofDescriptor(
            name='kind',
            full_name='atarashi.Feature.kind',
            index=0,
            containing_type=None,
            fields=[]),
    ],
    serialized_start=136,
    serialized_end=295, )

_EXAMPLE = _descriptor.Descriptor(
    name='Example',
    full_name='atarashi.Example',
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name='features',
            full_name='atarashi.Example.features',
            index=0,
            number=1,
            type=11,
            cpp_type=10,
            label=3,
            has_default_value=False,
            default_value=[],
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            options=None),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    options=None,
    is_extendable=False,
    extension_ranges=[],
    oneofs=[],
    serialized_start=297,
    serialized_end=343, )

_FEATURE.fields_by_name['bytes_list'].message_type = _BYTESLIST
_FEATURE.fields_by_name['float_list'].message_type = _FLOATLIST
_FEATURE.fields_by_name['int64_list'].message_type = _INT64LIST
_FEATURE.oneofs_by_name['kind'].fields.append(_FEATURE.fields_by_name[
    'bytes_list'])
_FEATURE.fields_by_name[
    'bytes_list'].containing_oneof = _FEATURE.oneofs_by_name['kind']
_FEATURE.oneofs_by_name['kind'].fields.append(_FEATURE.fields_by_name[
    'float_list'])
_FEATURE.fields_by_name[
    'float_list'].containing_oneof = _FEATURE.oneofs_by_name['kind']
_FEATURE.oneofs_by_name['kind'].fields.append(_FEATURE.fields_by_name[
    'int64_list'])
_FEATURE.fields_by_name[
    'int64_list'].containing_oneof = _FEATURE.oneofs_by_name['kind']
_EXAMPLE.fields_by_name['features'].message_type = _FEATURE
DESCRIPTOR.message_types_by_name['BytesList'] = _BYTESLIST
DESCRIPTOR.message_types_by_name['FloatList'] = _FLOATLIST
DESCRIPTOR.message_types_by_name['Int64List'] = _INT64LIST
DESCRIPTOR.message_types_by_name['Feature'] = _FEATURE
DESCRIPTOR.message_types_by_name['Example'] = _EXAMPLE

BytesList = _reflection.GeneratedProtocolMessageType(
    'BytesList',
    (_message.Message, ),
    dict(
        DESCRIPTOR=_BYTESLIST,
        __module__='atarashi.protos.example_pb2'
        # @@protoc_insertion_point(class_scope:atarashi.BytesList)
    ))
_sym_db.RegisterMessage(BytesList)

FloatList = _reflection.GeneratedProtocolMessageType(
    'FloatList',
    (_message.Message, ),
    dict(
        DESCRIPTOR=_FLOATLIST,
        __module__='atarashi.protos.example_pb2'
        # @@protoc_insertion_point(class_scope:atarashi.FloatList)
    ))
_sym_db.RegisterMessage(FloatList)

Int64List = _reflection.GeneratedProtocolMessageType(
    'Int64List',
    (_message.Message, ),
    dict(
        DESCRIPTOR=_INT64LIST,
        __module__='atarashi.protos.example_pb2'
        # @@protoc_insertion_point(class_scope:atarashi.Int64List)
    ))
_sym_db.RegisterMessage(Int64List)

Feature = _reflection.GeneratedProtocolMessageType(
    'Feature',
    (_message.Message, ),
    dict(
        DESCRIPTOR=_FEATURE,
        __module__='atarashi.protos.example_pb2'
        # @@protoc_insertion_point(class_scope:atarashi.Feature)
    ))
_sym_db.RegisterMessage(Feature)

Example = _reflection.GeneratedProtocolMessageType(
    'Example',
    (_message.Message, ),
    dict(
        DESCRIPTOR=_EXAMPLE,
        __module__='atarashi.protos.example_pb2'
        # @@protoc_insertion_point(class_scope:atarashi.Example)
    ))
_sym_db.RegisterMessage(Example)

_FLOATLIST.fields_by_name['value'].has_options = True
_FLOATLIST.fields_by_name['value']._options = _descriptor._ParseOptions(
    descriptor_pb2.FieldOptions(), _b('\020\001'))
_INT64LIST.fields_by_name['value'].has_options = True
_INT64LIST.fields_by_name['value']._options = _descriptor._ParseOptions(
    descriptor_pb2.FieldOptions(), _b('\020\001'))
# @@protoc_insertion_point(module_scope)
